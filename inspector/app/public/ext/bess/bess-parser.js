/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,4],$V2=[1,7],$V3=[1,10],$V4=[1,11],$V5=[1,9],$V6=[5,16],$V7=[1,41],$V8=[1,39],$V9=[1,24],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,38],$Vk=[1,40],$Vl=[2,126],$Vm=[1,44],$Vn=[1,53],$Vo=[5,7,11,16,17,36,52],$Vp=[11,17,22,31,49,70,82,87,88,89,90,91,92,93,95,96],$Vq=[11,17,19,22,27,31,32,36,43,49,50,51,52,53,54,55,56,70,82,84,86,87,88,89,90,91,92,93,95,96],$Vr=[11,17,32,36,43,49,70,84,86,87,88,89,90,91,92,93,95,96],$Vs=[1,69],$Vt=[1,70],$Vu=[1,71],$Vv=[11,15,16,17,19,22,31,32,36,43,49,52,60,61,62,70,84,86,87,88,89,90,91,92,93,95,96],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,81],$VA=[11,17,22,32,36,43,49,70,82,84,86,87,88,89,90,91,92,93,95,96],$VB=[22,31],$VC=[15,60,61,62,82],$VD=[1,105],$VE=[1,106],$VF=[2,59],$VG=[22,27],$VH=[16,17,36,52],$VI=[1,140],$VJ=[2,29],$VK=[1,149],$VL=[22,32,43,49,50,51,52,62],$VM=[2,62],$VN=[1,171],$VO=[2,65],$VP=[1,175],$VQ=[1,174],$VR=[1,177],$VS=[1,176],$VT=[22,49,50,51,52],$VU=[16,17,36,52,82],$VV=[32,43,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"grammar":3,"declarations":4,"EOF":5,"declaration":6,".":7,"bessHiddenAssign":8,"cssRule":9,"bessIdentAny":10,"FUNCTION":11,"bessAssocOrFunc":12,"bessFunctionCall":13,"bessBody":14,"{":15,"}":16,"IDENT":17,"bessAfterIdent":18,":":19,"bessAssign":20,"bessArgumentsOptional":21,")":22,"bessFuncValueOrCss":23,"plainCssExprArgs":24,"cssBody":25,"cssExpr":26,";":27,"bessArguments":28,"bessArgument":29,"bessArgumentMore":30,",":31,"$":32,"bessVariable":33,"bessNamespaceIdent":34,"bessNamespaceResolver":35,"@":36,"bessFunctionNamespace":37,"W":38,"cssExprOptional":39,"bessFunctionNamespaceResolver":40,"bessFunctionNamespaceResolverOptional":41,"bessArithmetic":42,"(":43,"bessArithmeticTermOptional":44,"bessArithmeticTerm":45,"cssTerm":46,"bessArithmeticOperation":47,"bessArithmeticOperator":48,"-":49,"+":50,"*":51,"/":52,"%":53,"^":54,"|":55,"&":56,"selectorsGroup":57,"selectorTarget":58,"selectorsMore":59,"SELECTOR":60,"BESS_IDENT":61,"`":62,"embess":63,"embessVar":64,"embessMath":65,"embessNsi":66,"embessValue":67,"embessOperation":68,"embessOperator":69,"NUMBER":70,"cssDeclaration":71,"cssIdentAny":72,"cssAfterIdent":73,"plainCssExpr":74,"plainCssExprArgsMore":75,"plainCssTerm":76,"plainCssExprMore":77,"cssUnaryOperator":78,"cssUnit":79,"cssValue":80,"cssOperator":81,"S":82,"cssPriority":83,"IMPORTANT_SYM":84,"cssExprMore":85,"JAVASCRIPT":86,"PERCENTAGE":87,"LENGTH":88,"EMS":89,"EXS":90,"ANGLE":91,"TIME":92,"FREQ":93,"cssFunction":94,"STRING":95,"HASH":96,"identOptional":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:".",11:"FUNCTION",15:"{",16:"}",17:"IDENT",19:":",22:")",27:";",31:",",32:"$",36:"@",43:"(",49:"-",50:"+",51:"*",52:"/",53:"%",54:"^",55:"|",56:"&",60:"SELECTOR",61:"BESS_IDENT",62:"`",70:"NUMBER",82:"S",84:"IMPORTANT_SYM",86:"JAVASCRIPT",87:"PERCENTAGE",88:"LENGTH",89:"EMS",90:"EXS",91:"ANGLE",92:"TIME",93:"FREQ",95:"STRING",96:"HASH"},
productions_: [0,[3,2],[4,1],[4,0],[6,3],[6,2],[6,2],[6,3],[6,3],[14,3],[8,1],[10,2],[18,2],[18,1],[18,1],[12,3],[12,4],[23,3],[23,2],[20,2],[21,1],[21,0],[28,2],[30,2],[30,0],[29,2],[33,2],[34,3],[35,3],[35,0],[13,5],[37,1],[37,2],[40,3],[41,1],[41,0],[42,3],[44,1],[44,0],[45,2],[47,2],[47,0],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[57,3],[59,1],[59,0],[58,1],[58,1],[58,3],[63,2],[63,2],[63,0],[64,3],[66,3],[66,0],[65,4],[68,3],[68,0],[67,1],[67,1],[67,1],[69,1],[69,1],[69,1],[69,1],[9,6],[25,3],[25,1],[71,1],[71,1],[71,2],[72,3],[73,4],[73,1],[24,2],[75,3],[75,0],[74,3],[77,1],[77,0],[76,2],[76,1],[76,1],[81,2],[81,2],[81,2],[81,2],[81,1],[78,1],[83,1],[39,1],[39,0],[26,2],[85,2],[85,1],[85,0],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[80,1],[80,1],[80,1],[94,4],[38,2],[38,0],[97,1],[97,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			var scopeRoot = {};
			var cssSheet = [];
			var jsol = {};
			scopeRoot['^'] = false;
			var decls = $$[$0-1];

			// console.log(JSON.stringify(decls,null,'\t'));

			for(var i=decls.length-1; i>=0; i--) {
				expandDeclaration( decls[i], scopeRoot, jsol, cssSheet );
			}

			return {
				css: cssSheet.join('\n'),
				js: JSON.stringify(jsol, null, '\t'),
			};
		
break;
case 3: case 24: case 29: case 35: case 41: case 53: case 62: case 65: case 75: case 84: case 87: case 103:

			this.$ = [];
		
break;
case 4:

			this.$ = $$[$0];
			this.$.push($bessHiddenRule);
		
break;
case 5: case 6: case 22: case 28: case 39: case 40: case 57: case 61: case 74: case 82: case 100:

			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 7:

			this.$ = $$[$0];
			this.$.push(
				__($$[$0-1], {
					varName: $$[$0-2].substr(0,$$[$0-2].length-1),
				})
			);
		
break;
case 8:

			this.$ = $$[$0];
			this.$.push(
				{
					isRuledCall: true,
					bess: $$[$0-2],
					css: $$[$0-1],
				}
			);
		
break;
case 9:

			this.$ = {
				body: $$[$0-1],
			};
		
break;
case 10:

			this.$ = __($$[$0], {
				isTransparent: true,
			});
		
break;
case 11:

			this.$ = __($$[$0], {
				varName: $$[$0-1],
			});
		
break;
case 12:

			this.$ = __($$[$0], {
				isAssignment: true,
			});
		
break;
case 15:

			this.$ = __($$[$0], {
				arguments: $$[$0-2],
			});
		
break;
case 16:

			this.$ = {
				isDictionary: true,
				arguments: $$[$0-3],
				bess: $$[$0],
			};
		
break;
case 17:

			this.$ = __($$[$0-1], {
				isFunction: true,
			});
		
break;
case 18:

			this.$ = __($$[$0], {
				isValueFunction: true,
			});
		
break;
case 19:

			this.$ = {
				gets: $$[$0-1],
			};
		
break;
case 21: case 99:

			this.$ = false;
		
break;
case 23: case 81: case 90:

			this.$ = $$[$0];
		
break;
case 25:

			this.$ = '$' + $$[$0];
		
break;
case 26:

			this.$ = {
				isVar: true,
				varName: [ $$[$0] ],
			};
		
break;
case 27:

			this.$ = $$[$0];

			this.$.push($$[$0-1]);
			this.$ = {
				isVar: true,
				varName: this.$,
			};
	 	
break;
case 30:

			this.$ = {
				isBessCall: true,
				method: $$[$0-3],
				args: $$[$0-1],
			};
		
break;
case 31:

			this.$ = [ $$[$0].substr(0, $$[$0].length-1) ];
		
break;
case 32:

			this.$ = $$[$0-1];
			this.$.unshift($$[$0].substr(0, $$[$0].length-1));
		
break;
case 33: case 85:

			this.$ = $$[$0];
			this.$.push($$[$0-2]);
		
break;
case 36:

			this.$ = {
				isArithmetic: true,
				term: $$[$0-1],
			};
		
break;
case 38:

			this.$ = {};
		
break;
case 51:

			this.$ = $$[$0];
			if($$[$0-1] && $$[$0-1].length && this.$.length) this.$.push($$[$0-1]);
			this.$.push($$[$0-2]);
		
break;
case 55:

			this.$ = {
				isVar: true,
				varName: [$$[$0].substr(1)],
			};
		
break;
case 56: case 78:

			this.$ = $$[$0-1];
		
break;
case 59:

			this.$ = [];
			this.$.isEmbess = true;
		
break;
case 60:

			this.$ = $$[$0];
			this.$.push($$[$0-1]);
			this.$ = {
				isVar: true,
				varName: this.$,
			};
		
break;
case 63:

			this.$ = $$[$0-1];
			this.$.push($$[$0-2]);
			this.$.isMath = true;
		
break;
case 64:

			this.$ = $$[$0];
			this.$.push($$[$0-1]);
			this.$.push($$[$0-2]);
		
break;
case 73:

			this.$ = {
				isRule: true,
				selectors: $$[$0-3],
				css: $$[$0-1],
			};
		
break;
case 79:

			this.$ = $$[$0];
			if($$[$0].css) {
				this.$.varName = $$[$0-2];
			}
			else {
				this.$.prop = $$[$0-2];
			}
		
break;
case 80:

			this.$ ={
				value: $$[$0-1],
			};
		
break;
case 83:

			this.$ = [ $plainCssExpr ];
		
break;
case 88: case 104:

			this.$ = $$[$0-1] + $$[$0];
		
break;
case 101:

			this.$ = $$[$0];
			var term = this.$.pop();
			this.$.push(term);
			if($$[$0-1] != ' ') {
				this.$.push($$[$0-1]);
			}
		
break;
case 121:

			this.$ = {
				isStr: true,
				value: strip($$[$0]),
			};
		
break;
case 124:

			this.$ = {
				isCall: true,
				method: $$[$0-3],
				args: $$[$0-1],
			};
		
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:$V1,9:5,10:6,11:$V2,13:8,17:$V3,36:$V4,52:$V5},{1:[3]},{5:[1,12]},o($V6,[2,2]),{8:13,10:14,17:$V3},o($V6,$V0,{6:3,9:5,10:6,13:8,4:15,7:$V1,11:$V2,17:$V3,36:$V4,52:$V5}),o($V6,$V0,{6:3,9:5,10:6,13:8,4:16,7:$V1,11:$V2,17:$V3,36:$V4,52:$V5}),{11:$V7,12:17,17:$V8,21:18,22:[2,21],24:19,28:20,29:22,32:$V9,49:$Va,70:$Vb,74:21,76:23,78:25,79:26,80:27,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},{9:42,52:$V5},o([60,61,62],$Vl,{38:43,82:$Vm}),{9:47,14:48,15:[1,49],18:45,19:[1,46],52:$V5},{11:[1,51],17:$Vn,37:50,40:52},{1:[2,1]},o($V6,$V0,{6:3,9:5,10:6,13:8,4:54,7:$V1,11:$V2,17:$V3,36:$V4,52:$V5}),o($Vo,[2,10]),o($V6,[2,5]),o($V6,[2,6]),o($V6,$V0,{6:3,9:5,10:6,13:8,4:55,7:$V1,11:$V2,17:$V3,36:$V4,52:$V5}),{22:[1,56]},{22:[1,57]},{22:[2,20]},{22:[2,84],31:[1,59],75:58},{22:[2,24],30:60,31:[1,61]},o([11,17,22,31,49,70,87,88,89,90,91,92,93,95,96],$Vl,{38:62,82:$Vm}),{17:[1,63]},{11:$V7,70:$Vb,79:64,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37},o($Vp,[2,89]),o($Vp,[2,90]),o([11,70,87,88,89,90,91,92,93],[2,96]),o($Vq,[2,112]),o($Vq,[2,113]),o($Vq,[2,114]),o($Vq,[2,115]),o($Vq,[2,116]),o($Vq,[2,117]),o($Vq,[2,118]),o($Vq,[2,119]),o($Vq,[2,120]),o($Vq,[2,121]),o($Vq,[2,122]),o($Vq,[2,123]),o($Vr,$Vl,{38:65,82:$Vm}),o($V6,$V0,{6:3,9:5,10:6,13:8,4:66,7:$V1,11:$V2,17:$V3,36:$V4,52:$V5}),{57:67,58:68,60:$Vs,61:$Vt,62:$Vu},o($Vv,$Vl,{38:72,82:$Vm}),o($Vo,[2,11]),{11:$V7,13:80,17:$V8,20:73,26:74,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($Vo,[2,13]),o($Vo,[2,14]),{4:87,6:3,7:$V1,9:5,10:6,11:$V2,13:8,16:$V0,17:$V3,36:$V4,52:$V5},o([11,17,22,32,36,43,49,70,84,86,87,88,89,90,91,92,93,95,96],$Vl,{38:88,82:$Vm}),o($VA,[2,31]),{11:[1,89]},{7:[1,90]},o($V6,[2,4]),o($V6,[2,7]),{15:[1,92],19:[1,93],23:91},{19:[1,94]},{22:[2,82]},o([11,17,49,70,87,88,89,90,91,92,93,95,96],$Vl,{38:95,82:$Vm}),{22:[2,22]},{28:96,29:22,32:$V9},o($VB,[2,87],{76:23,78:25,79:26,80:27,94:37,77:97,74:98,11:$V7,17:$V8,49:$Va,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,95:$Vj,96:$Vk}),o($VB,[2,25]),o($Vp,[2,88]),{11:$V7,13:80,17:$V8,26:99,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($V6,[2,8]),{15:[1,100]},o([15,60,61,62],$Vl,{38:101,82:$Vm}),o($VC,[2,54]),o($VC,[2,55]),{32:$VD,43:$VE,62:$VF,63:102,64:103,65:104},o($Vv,[2,125]),o($Vo,[2,12]),{27:[1,107]},o($VG,[2,103],{94:37,46:75,78:76,79:77,80:78,34:79,13:80,42:82,83:83,85:108,81:109,26:110,11:$V7,17:$V8,31:[1,112],32:$Vw,36:$V4,43:$Vx,49:$Va,50:[1,114],51:[1,113],52:[1,111],70:$Vb,82:[1,115],84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,95:$Vj,96:$Vk}),{11:$V7,70:$Vb,79:116,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37},o($Vq,[2,105]),o($Vq,[2,106]),o($Vq,[2,107]),o($Vq,[2,108]),o($Vq,[2,109]),o($Vq,[2,110]),o($Vq,[2,111]),{17:[1,117]},{11:$V7,13:80,17:$V8,22:[2,38],32:$Vw,34:79,36:$V4,42:82,43:$Vx,44:118,45:119,46:120,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($Vq,[2,97]),{16:[1,121]},{11:$V7,13:80,17:$V8,22:[2,99],26:123,32:$Vw,34:79,36:$V4,39:122,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($VA,[2,32]),{11:[2,35],17:$Vn,40:125,41:124},o($Vo,[2,15]),o($VH,$Vl,{25:126,38:127,82:$Vm}),{11:$V7,13:80,17:$V8,20:128,26:74,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},{11:$V7,13:80,17:$V8,20:129,26:74,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},{11:$V7,17:$V8,24:130,49:$Va,70:$Vb,74:21,76:23,78:25,79:26,80:27,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},{22:[2,23]},o($VB,[2,85]),o($VB,[2,86]),{22:[1,131]},o($VH,$Vl,{38:127,25:132,82:$Vm}),{15:[2,53],57:134,58:68,59:133,60:$Vs,61:$Vt,62:$Vu},{62:[1,135]},{32:$VD,43:$VE,62:$VF,63:136,64:103,65:104},{32:$VD,43:$VE,62:$VF,63:137,64:103,65:104},{17:[1,138]},{32:$VD,43:$VE,64:141,65:142,67:139,70:$VI},o($Vo,[2,19]),o($VG,[2,100]),{11:$V7,13:80,17:$V8,26:143,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($VG,[2,102]),o($Vr,$Vl,{38:144,82:$Vm}),o($Vr,$Vl,{38:145,82:$Vm}),o($Vr,$Vl,{38:146,82:$Vm}),o($Vr,$Vl,{38:147,82:$Vm}),o($Vr,[2,95]),o($Vq,[2,104]),o($Vq,$VJ,{35:148,7:$VK}),{22:[1,150]},{22:[2,37]},{19:[1,161],22:[2,41],47:151,48:152,49:[1,153],50:[1,154],51:[1,155],52:[1,156],53:[1,157],54:[1,158],55:[1,159],56:[1,160]},o($Vo,[2,9]),{22:[1,162]},{22:[2,98]},{11:[2,33]},{11:[2,34]},{16:[1,163]},{9:166,13:167,16:[2,75],17:[1,168],36:$V4,52:$V5,71:164,72:165},o($Vo,[2,18]),o($Vo,[2,16]),{22:[2,83]},o($Vq,[2,124]),{16:[1,169]},{15:[2,51]},{15:[2,52]},o($VC,[2,56]),{62:[2,57]},{62:[2,58]},o($VL,$VM,{66:170,7:$VN}),{22:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,68:172,69:173},o($VT,[2,66]),o($VT,[2,67]),o($VT,[2,68]),o($VG,[2,101]),o($Vr,[2,91]),o($Vr,[2,92]),o($Vr,[2,93]),o($Vr,[2,94]),o($Vq,[2,27]),{17:[1,178]},o($Vq,[2,36]),{22:[2,39]},{11:$V7,13:80,17:$V8,32:$Vw,34:79,36:$V4,42:82,43:$Vx,45:179,46:120,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},o($Vr,[2,42]),o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),o($Vr,[2,47]),o($Vr,[2,48]),o($Vr,[2,49]),o($Vr,[2,50]),o($Vq,[2,30]),o($Vo,[2,17]),o($VH,$Vl,{38:127,25:180,82:$Vm}),o($VU,[2,76]),o($VU,[2,77]),{27:[1,181]},o([19,52],$Vl,{38:182,82:$Vm}),o([5,7,11,16,17,36,52,82],[2,73]),o($VL,[2,60]),{17:[1,183]},{22:[1,184]},{32:$VD,43:$VE,64:141,65:142,67:185,70:$VI},o($VV,[2,69]),o($VV,[2,70]),o($VV,[2,71]),o($VV,[2,72]),o($Vq,$VJ,{35:186,7:$VK}),{22:[2,40]},{16:[2,74]},o($VU,[2,78]),{9:189,19:[1,188],52:$V5,73:187},o($VL,$VM,{66:190,7:$VN}),o($VL,[2,63]),{22:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,68:191,69:173},o($Vq,[2,28]),o($VU,[2,79]),o($Vr,$Vl,{38:192,82:$Vm}),o($VU,[2,81]),o($VL,[2,61]),{22:[2,64]},{11:$V7,13:80,17:$V8,26:193,32:$Vw,34:79,36:$V4,42:82,43:$Vx,46:75,49:$Va,70:$Vb,78:76,79:77,80:78,83:83,84:$Vy,86:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh,93:$Vi,94:37,95:$Vj,96:$Vk},{27:[1,194]},o($VU,[2,80])],
defaultActions: {12:[2,1],20:[2,20],58:[2,82],60:[2,22],96:[2,23],119:[2,37],123:[2,98],124:[2,33],125:[2,34],130:[2,83],133:[2,51],134:[2,52],136:[2,57],137:[2,58],151:[2,39],179:[2,40],180:[2,74],191:[2,64]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function __() {
	var obj = arguments[0];
	for(var i=1; i<arguments.length; i++) {
		var arg = arguments[i];
		for(var e in arg) {
			obj[e] = arg[e];
		}
	}
	return obj;
}

function strip(str) {
	return str.substr(1, str.length-2);
}

function resolveVar(val, scope) {
	var node = scope;
	var names = val.varName;
	if(names.length === 1) {
		var name = names[0];
		do {
			if(node[name]) {
				return node[name];
			}
			node = node['^'];
		} while(node);
		// variable name not found in current scope
		console.error(name+' is undefined.');
		return '';
	}
	else {
		var candidate = undefined;
		var namesLen = names.length;

		// first, resolve the namespace address
		var name = names[namesLen-1];
		do {
			if(node[name]) {
				candidate = node[name];
				break;
			}
			node = node['^'];
		} while(node);

		// next, follow the variable down the scope tree
		for(i=namesLen-2; i>=0; i--) {
			if(typeof candidate === 'undefined') {
				return undefined;
			}
			candidate = candidate[names[i]];
		}

		// finally, return whatever we found
		return candidate;
	}
}


function resolveValue(val, scope) {
	var type = typeof val;
	if(type === 'string') {
		return val;
	}
	else if(type === 'number') {
		return val;
	}
	else if(type === 'object') {
		if(val.isStr) {
			return val;
		}
		else if(val.isVar) {
			return resolveVar(val, scope);
		}
		else if(val.isNsi) {
			console.log('# ',val);
			var names = val.varName;
			var nameLen = names.length;
			var node = resolveValue({
				isVar: true,
				varName: names[nameLen-1],
			}, scope);
			if(!node) return undefined;
			for(var i=nameLen-2; i>=0; i--) {
				var next = node[names[i]];
				if(!next) {
					return undefined;
				}
				node = next;
			}
			return node;
		}
		else if(val.join) {
			var expr = resolveExpr(val, scope);
			if(expr.isStr) return irks(expr.value);
			return expr.value;
		}
		else if(val.isCall) {
			var args = val.args;
			var isString = false;
			var expr = resolveExpr(args, scope);
			if(expr.isStr) expr.value = irks(expr.value);
			return val.method+expr.value+')';
		}
		else if(val.isBessCall) {
			return val;
		}
		else if(val.isArithmetic) {
			return resolveArithmetic(val.term, scope);
		}
	}
	return undefined;
}

function resolveArithmetic(term, scope) {

	var ra = resolveValue(term[2], scope);
	var a = parseFloat(ra);
	var au = /^[0-9\-\+\.]+(.*)/i.exec(ra);
	au = au? au[1]: '';

	var rb = resolveValue(term[0], scope);
	var b = parseFloat(rb);
	var bu = /^[0-9\-\+\.]+(.*)/i.exec(rb);
	bu = bu? bu[1]: '';

	var r;
	var ru;

	switch(term[1]) {
		case '-':
			r = a - b; break;
		case '+':
			r = a + b; break;
		case '*':
			r = a * b; break;
		case '/':
			r = a / b; break;
		case '^':
			r = a ^ b; break;
		case '%':
			r = a % b; break;
		case '|':
			r = a | b; break;
		case '&':
			r = a & b; break;
	}

	ru = au || bu;
	return r+''+ru;
}

function irks(str) {
	return "'"
		+str
			.replace(/\\(.)/g, function(a,b){return b;})
			.replace(/'/g,"\\'")
		+"'";
}
function dirks(str) {
	return '"'
		+str
			.replace(/\\(.)/g, function(a,b){return b;})
			.replace(/"/g,'\\"')
		+'"';
}

function resolveExpr(list, scope) {
	var b = [];
	var prevStr = true;
	var hasStr = false;

	// console.log(list);
	
	for(var i=list.length-1; i>=0; i--) {

		var value = resolveValue( list[i], scope );
		if(!value) {
			// undefined variable!
			console.log('\nunable to resolve: ',scope);
			console.error('\nvariable undefined: $'+list[i].varName.reverse().join('.'));
			process.exit(1);
		}
		
		else if(!value.isStr) {
			if(!prevStr && value != ',') b.push(' ');
			prevStr = false;
		}
		else {
			value = value.value;
			prevStr = true;
			hasStr = true;
		}
		b.push(value);
	}
	
	return {
		isStr: hasStr,
		value: b.join(''),
	};
}


// resolves a css rule
function resolveRule(decl, scope, jsol, sheet, parentSelectors) {
	var name = decl.varName;

	// resolve this rule's selectors
	var selectors = resolveSelectors(decl.selectors, scope, jsol);

	// prepare to append sub rules
	var subs = null;

	// start off by creating the jsol object for this item
	if(name && jsol) {
		jsol[name] = {};
		subs = {};
	}

	// if this is a sub-rule
	if(parentSelectors) {
		var selectorSeparator = /^[a-zA-Z\*]/.test(selectors)? ' ': '';
		selectors = parentSelectors + selectorSeparator + selectors;
	}

	// for css and jsol respectively
	var rule = []; var assoc = {}; var hasSubRules = false;

	// iterate over all the css lines
	var lines = decl.css;
	for(var i=lines.length-1; i>=0; i--) {
		var line = lines[i];

		// this is an embedded rule
		if(line.isRule) {
			hasSubRules = true;
			resolveRule(line, scope, subs, sheet, selectors);
		}

		// this is a bess function call
		else if(line.isBessCall) {
			var a_res = scope[line.method[0]].apply({}, line.args || []);
			for(var e in a_res) {
				assoc[e] = a_res[e];
				rule.push(e+': '+a_res[e]+';');
			}
			// console.log(assoc);
			// process.exit(0);
		}

		// otherwise, assume it is    property: value;
		else {
			console.log(line);
			var exprValue = resolveValue(line.value, scope);
			rule.push(line.prop+': '+exprValue+';');
			assoc[line.prop] = exprValue;
		}
	}

	// append the lines for this declaration's rule only
	sheet.push(
		selectors+' {\n\t'+rule.join('\n\t')+'\n}\n'
	);

	// if this obj has a name
	if(name) {
		// update the scope
		scope[name] = assoc;

		// if the jsol object is also not null
		if(jsol) {
			__(jsol[name], assoc);
			if(hasSubRules && subs) {
				jsol[name].$ = subs;
			}
		}
	}
}



function expandDeclaration(decl, scope, jsol, sheet) {

	var name = decl.varName;

	// plain bess assignment    varName: value;
	if(decl.isAssignment) {
		var b = resolveExpr(decl.gets, scope).value;
		scope[name] = b;

		// unlesss the assignment is transparent
		if(!decl.isTransparent) {
			// give it a jsol value
			jsol[name] = b;
		}
	}

	// ...?
	else if(decl.body) {
		var subScope = { '^': scope };
		var subJsol = {};
		var body = decl.body;
		var bodyLen = body.length;
		for(var i=bodyLen-1; i>=0; i--) {
			expandDeclaration( body[i], subScope, subJsol, sheet );
		}
		scope[name] = subScope;
		jsol[name] = subJsol;
	}

	//
	else if(decl.isFunction) {
		buildRuleFunction(decl, scope, jsol);
	}

	//
	else if(decl.isValueFunction) {
		buildValueFunction(decl, scope, jsol);
	}

	// dictionary definition    dict(key): value;
	else if(decl.isDictionary) {
		buildDictionary(decl, scope, jsol);
	}

	// css rule     / rule { ... }
	else if(decl.isRule) {
		resolveRule(decl, scope, jsol, sheet);
	}

	// unknown
	else {
		console.log('unable to id: ',decl);
	}
}

function buildDictionary(decl, scope, jsol) {
	var b = resolveExpr(decl.bess.gets, scope).value;
	var name = decl.varName;
	if(!scope[name]) scope[name] = {};
	node = scope[name];

	var args = decl.arguments;
	for(var i=args.length-1; i>=0; i--) {
		var arg = args[i].join(' ');
		if(i===0) node[arg] = b;
		else {
			if(!node[arg]) node[arg] = {};
			node = node[arg];
		}
	}

	jsol[name] = scope[name];
}


// takes an array of $-prefixed strings to form a lookup hash
function hashBessArguments(argList) {
	var lookup = {};
	var create = [];

	for(var i=argList.length-1; i>=0; i--) {
		var arg = argList[i];
		lookup[ arg.substr(1) ] = true;
		create.push(arg);
	}

	return {
		lookup: lookup,
		create: create,
	};
}



function buildValueFunction(decl, scope, jsol) {

	var args = hashBessArguments(decl.arguments);
	var argLookup = args.lookup;
	var createFunc = args.create;

	var name = decl.varName;
	var gets = decl.gets;
	var b = [];

	var c = [];
	var prevStr = true;
	var hasStr = false;

	for(var i=gets.length-1; i>=0; i--) {
		var tmp = gets[i];
		// console.log('looking for: ',tmp);
		if(argLookup[tmp.varName] || tmp.isBessCall) {
console.log('WTF');
process.exit(0);
			if(c.length) {
				b.push({
					isStr: true,
					value: c.join('')
				});
			}
			c.length = 0;
			b.push(tmp);
			prevStr = false;
		}
		else {
			var r = resolveValue(tmp, scope), value;
			if(!r.isStr) {
				if(!prevStr) c.push(' ');
				prevStr = false;
			}
			else {
				r = r.value;
				prevStr = true;
			}
			c.push(r);
		}
	}


	if(c.length) {
		b.push({
			isStr: true,
			value: c.join('')
		});
	}

	var body = buildFunctionBody(b, scope, argLookup);

	// console.log('**** => ',body);
	createFunc.push(body);
	jsol[name] = scope[name] = Function.apply(global, createFunc);
}


function buildRuleFunction(decl, scope, jsol) {

	var args = hashBessArguments(decl.arguments);
	var argLookup = args.lookup;
	var createFunc = args.create;

	var name = decl.varName;
	var args = decl.arguments;

	var a = [];
	var b = [];
	var s = [];

	var prevStr = true;
	var hasStr = false;
	var css = '';

	for(var i=decl.length-1; i>=0; i--) {
		var line = decl[i];
		s.push(line.prop+': ');

		var expr = line.value;
		for(var j=expr.length-1; j>=0; j--) {
			var value = expr[j];
			if(value.isVar) {
				var varName = value.varName.join('.');
				if(argLookup[varName] || value.isBessCall) {

console.log('bess call');
console.log(b);
process.exit(0);

					if(s.length) {
						a.push({
							isStr: true,
							value: s.join(''),
						});
					}
					s.length = 0;
					a.push(value);
					prevStr = false;
				}
				else {
					console.log('!!',value);
					// resolveVar(value, scope);
				}
			}
			else {
				var r = resolveValue(value, scope);
				if(!r.isStr) {
					if(!prevStr) s.push(' ');
					prevStr = false;
				}
				else {
					r = r.value;
					prevStr = true;
				}
				a.push(r);
			}
		}	

		if(s.length) {
			a.push({
				isStr: true,
				value: s.join(''),
			});
		}
		b.push(a);
		a = [];
	}

	var retline = [];
	for(var i=0; i<b.length; i++) {
		var subline = [];
		var bi = b[i];
		for(var j=0; j<bi.length; j++) {
			var bij = bi[j];
			
			if(bij.isStr) {
				subline.push(
					irks(bij.value)
				);
			}
			else if(bij.isVar) {
				subline.push(
					'$'+bij.varName.join('.')
				);
			}
		}
		retline.push(subline.join('+'));
	}
	// console.log('['+retline.join(',')+']');

	var h_res = {};

	for(var e in decl) {
		var z_item = decl[e];
		if(typeof z_item == 'object') {
			if(z_item.prop) {
				h_res[z_item.prop] = z_item.value[0];
			}
		}
	}


	jsol[name] = scope[name] = function() {
		return h_res;
	};
	// console.log(jsol);
	// console.log(scope);
	// console.log(decl);
	// process.exit(0);
	// console.log(buildFunctionBody(b, scope));
}



function buildFunctionBody(b, scope, argLookup) {
	var retline = [];
	for(var i=0; i<b.length; i++) {
		var bi = b[i];
		if(bi.isStr) {
			retline.push(
				irks( bi.value )
			);
		}
		else if(bi.isVar) {
			retline.push(
				'$'+bi.varName.join('.')
			);
		}
		else if(bi.isBessCall) {
console.log('bess call');
console.log(b);
process.exit(0);
			var bnode = resolveValue({
					isVar: true,
					varName: bi.method,
				}, scope);
			var bargs = bi.args;
			for(var j=bargs.length-1; j>=0; j--) {
				// grab the first element in the var name array
				var barg = bargs[j];
				if(argLookup[barg.varName]) {
					// console.log('found variable: ',argLookup,barg,bnode,b);
					// process.exit(0);
				}
				// if(bnode.hasOwnProperty(bargName)) {
				// 	bnode = bnode[bargName];
				// }
			}
			// console.log('bnode: ',bnode);
			retline.push(
				'this('+JSON.stringify(bi)+')' // TODO: replace with proper method call (inspect bi: {method, args} )
			);
		}
	}

	return 'return '+retline.join('+')+';';
}



function resolveSelectorTarget(trgt, scope) {
	var val = resolveValue(trgt, scope);
	// console.log('** resolving selecor target: ',trgt,' => ',expr);
	return val.isStr? dirks(val.value): val;
}

function resolveSelectors(sels, scope, jsol) {
	var css = '';
	
	for(var i=sels.length-1; i>=0; i--) {
		var chunk = sels[i];
		if(typeof chunk === 'string') {
			css += chunk;
		}
		else {
			css += resolveSelectorTarget(chunk, scope);
		}
	}

	return css;
}




/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
break;
case 1: 
break;
case 2: return 11; 
break;
case 3: return 17; 
break;
case 4:
		this.begin('bess');
		return yy_.yytext;
	
break;
case 5: this.begin('selector'); return yy_.yytext; 
break;
case 6: this.popState(); return yy_.yytext; 
break;
case 7: this.popState(); return yy_.yytext; 
break;
case 8: this.popState(); this.begin('css'); return yy_.yytext; 
break;
case 9: this.begin('embess'); return yy_.yytext; 
break;
case 10: return 61; 
break;
case 11: return 60; 
break;
case 12: return 82; 
break;
case 13: this.popState(); return yy_.yytext; 
break;
case 14: return 11; 
break;
case 15: return 17; 
break;
case 16: return 70; 
break;
case 17: this.popState(); return yy_.yytext; 
break;
case 18: return 82; 
break;
case 19: return 95; 
break;
case 20: return 'BAD_STRING'; 
break;
case 21: return 86; 
break;
case 22: return 11; 
break;
case 23: return 17; 
break;
case 24: return 84; 
break;
case 25: return 89; 
break;
case 26: return 90; 
break;
case 27: return 88; 
break;
case 28: return 88; 
break;
case 29: return 88; 
break;
case 30: return 88; 
break;
case 31: return 88; 
break;
case 32: return 88; 
break;
case 33: return 91; 
break;
case 34: return 91; 
break;
case 35: return 91; 
break;
case 36: return 92; 
break;
case 37: return 92; 
break;
case 38: return 93; 
break;
case 39: return 93; 
break;
case 40: return 'DIMENSION'; 
break;
case 41: return 87; 
break;
case 42: return 70; 
break;
case 43: this.begin('math'); return yy_.yytext; 
break;
case 44: this.popState(); return yy_.yytext; 
break;
case 45: return 96; 
break;
case 46: return 17; 
break;
case 47: 
break;
case 48: return yy_.yytext; 
break;
case 49: return 5; 
break;
}
},
rules: [/^(?:(\/\*[^*]*\*+([^/*][^*]*\*+)*\/))/,/^(?:([ \t\r\n]+))/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?::)/,/^(?:\/)/,/^(?:\{)/,/^(?:;)/,/^(?:\{)/,/^(?:`)/,/^(?:\$([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:([\$]?[^{\$ \r\n\t]+))/,/^(?:([ \t\r\n]+))/,/^(?:`)/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*)))/,/^(?:\})/,/^(?:([ \t\r\n]+))/,/^(?:(("([^\n\r\\"]|\\(\n|\r\n|\r)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*")|('([^\n\r\\']|\\(\n|\r\n|\r)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*')))/,/^(?:(("([^\n\r\\"]|\\(\n|\r\n|\r)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*\\?)|('([^\n\r\\']|\\(\n|\r\n|\r)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*\\?)))/,/^(?:`([^`]*)`)/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:!((([ \t\r\n]+)?)|(\/\*[^*]*\*+([^/*][^*]*\*+)*\/))*([iI])([mM])([pP])([oO])([rR])([tT])([aA])([nN])([tT]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([eE])([mM]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([eE])([xX]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([pP])([xX]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([cC])([mM]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([mM])([mM]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([iI])([nN]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([pP])([tT]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([pP])([cC]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([dD])([eE])([gG]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([rR])([aA])([dD]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([gG])([rR])([aA])([dD]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([mM])([sS]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([sS]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([hH])([zZ]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([kK])([hH])([zZ]))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*))%)/,/^(?:(([\-]?[\.][0-9]+)|([\-]?[0-9]+[\.]?[0-9]*)))/,/^(?:\()/,/^(?:\))/,/^(?:#(([0-9a-fA-F])+))/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:([ \t\r\n]+))/,/^(?:.)/,/^(?:$)/],
conditions: {"bess":{"rules":[0,1,6,7,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49],"inclusive":true},"selector":{"rules":[0,8,9,10,11,12,40,48,49],"inclusive":true},"embess":{"rules":[0,1,13,14,15,16,48,49],"inclusive":true},"css":{"rules":[0,5,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49],"inclusive":true},"math":{"rules":[0,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}